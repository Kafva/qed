#!/usr/bin/env ruby
require 'yaml'
require 'optparse'

#==============================================================================#

USAGE = "---------------------
Tmux session manager

Profile format:

<session name>:
 - <window name>:
      [layout: <single|vsplit|hsplit|htree|three|four>]
      panes:
        - cwd: <...>
          host: <...>
          cmd:  <...>
        - cwd: <...>
          host: <...>
          cmd:  <...>
 - <window name>:
     ...
<session name>:
  ...

If the 'host' or 'cwd' arguments are omitted for a pane, the values from the
previous pane will be used.

Default layout is vertical split (vsplit).

The <window name> of a session can be translated into e.g. an icon via the
[--title-script] option: The script should define the method:

def title_translate name
    case name
    when /ruby|qed/
        'îˆ¾ '
    ...
    end
end

".freeze

#==============================================================================#
def die msg
    warn msg
    exit 1
end

def debug *args
    warn args if FLAGS[:debug]
end

# rubocop:disable Style/Documentation
class TmuxWindow
    attr_accessor :title, :layout, :panes

    def initialize window_name, dict
        @title      = title_translate window_name
        @title      = window_name if @title.nil?
        @layout     = if dict['layout'].nil?
                          'vsplit'
                      else
                          dict['layout']
                      end
        @panes      = dict['panes']
    end

    # The tmux commands that should be ran BEFORE building the pane
    # at `index` for the current @layout.
    # XXX:
    #   tmux split-window -v:   like 'split' in vim
    #   tmux split-window -h:   like 'vsplit' in vim
    def _layout_cmd index
        return '' if index.zero?

        case @layout
        when /^three|four$/
            #  ______________
            # |   0  |   1   |
            # |------|-------|
            # |  (3) |   2   |
            #  --------------
            #
            case index
            when 1
                " split-window -h  \\; \\\n"
            when 2
                " split-window -v  \\; \\\n"
            when 3
                " select-pane -t :.+ \\; \\\n" +
                " split-window -v  \\; \\\n"
            end
        when 'hthree'
            #  ______________
            # |   0  |   2   |
            # |--------------|
            # |      1       |
            #  --------------
            #
            case index
            when 1
                " split-window -v  \\; \\\n"
            when 2
                " select-pane -t :.+ \\; \\\n" +
                " split-window -h  \\; \\\n"
            end
        when 'single'
            ''
        when 'hsplit'
            "  split-window -v \\; \\\n"
        else # vsplit
            "  split-window -h \\; \\\n"
        end
    end

    def _filled
        case @layout
        when 'four'
            @panes.length >= 4
        when /^three|hthree$/
            @panes.length >= 3
        when 'single'
            @panes.length >= 1
        else # vsplit|hsplit
            @panes.length >= 2
        end
    end

    def build
        launch_str = ''
        prev_pane = TmuxPane.new @panes[0]

        # Fallback cwd should never be nil
        prev_pane.cwd = Dir.home if prev_pane.cwd.nil?

        # Add trailing panes if the layout has not been filled
        # inside of the configuration file.
        fill_pane = { cwd: prev_pane.cwd }
        until _filled
            @panes.append fill_pane
        end

        launch_str += " -n '#{title}' \\; \\\n"

        panes.each_with_index do |pane, i|
            debug "  Pane: #{pane}"

            tmux_pane = TmuxPane.new pane

            # Use @host and @cwd from previous pane if unset
            tmux_pane.update host: prev_pane.host, cwd: prev_pane.cwd

            launch_str += _layout_cmd i
            launch_str += tmux_pane.build

            prev_pane.host = tmux_pane.host unless tmux_pane.host.nil?
            prev_pane.cwd  = tmux_pane.cwd  unless tmux_pane.cwd.nil?
        end

        launch_str
    end
end

class TmuxPane
    attr_accessor :host, :cwd

    def initialize dict
        @host     = dict['host']
        # We should NOT expand '~' since commands could run in ssh
        @cwd      = dict['cwd']
        @cmd      = dict['cmd']
    end

    def update host:, cwd:
        @host = host if @host.nil?
        @cwd  = cwd if @cwd.nil?
    end

    def build
        cmd = ''
        cmd += "  send-keys 'ssh #{@host}' Enter \\; \\\n" unless @host.nil?
        cmd += "  send-keys 'cd #{@cwd}; clear' Enter \\; \\\n"
        cmd += "  send-keys '#{@cmd}' Enter \\; \\\n" unless @cmd.nil?
        cmd
    end
end

#==============================================================================#

# rubocop:disable Style/MutableConstant
FLAGS = {
    debug: false,
    conf: "#{Dir.home}/.secret/profiles.yml",
    title_script: "#{Dir.home}/dots/tmux/scripts/title-to-icon.rb"
}

parser = OptionParser.new do |opts|
    opts.banner = "usage: #{File.basename $0} [FLAGS] [sessions...]"
    opts.on('-cCONFIG', '--config=CONFIG', 'YAML configuration file') do |t|
        die "Failed to open: #{t}" unless File.readable? t
        FLAGS[:conf] = t
    end
    opts.on('-d', '--debug', 'Show debug information') do |_|
        FLAGS[:debug] = true
    end
    opts.on('-h', '--help', 'Show help and exit') do |_|
        opts.display
        exit
    end
    opts.on('-l', '--list', 'List windows in the configuration') do |_|
        out = ''
        YAML.load_file(FLAGS[:conf]).each do |session_name, session|
            session.each do |window_name, _|
                out += " #{session_name}.#{window_name.keys.first}"
            end
        end
        out.strip
        exit
    end
    opts.on('-tSCRIPT', '--title-script=SCRIPT',
            'Script to use for custom window name translations') do |t|
        FLAGS[:title_script] = t
    end
    opts.on('-?', 'Show verbose help and exit') do |_|
        opts.display
        puts USAGE
        exit
    end
end

begin
    parser.parse!
rescue StandardError => e
    puts e.message, parser.help
    exit 1
end

if ARGV.empty?
    puts parser.help
    exit 1
end

debug FLAGS

#==============================================================================#

require_relative FLAGS[:title_script] if File.readable? FLAGS[:title_script]

unless defined? title_translate
    # rubocop:disable Style/SingleLineMethods
    # rubocop:disable Style/MethodDefParentheses
    def title_translate(name) name end
end

launch_cmd = ''
launch_cmds = []

profile = YAML.load_file(FLAGS[:conf])

profile.each do |session_name, session|
    debug "Session: #{session_name}"

    # If the session name appears by itself, launch all windows
    launch_all_in_session = ARGV.include?(session_name) ||
                            ARGV.include?("#{session_name}.")
    launch_windows = []

    unless launch_all_in_session
        ARGV.each do |target|
            launch_windows.push target.split('.').last if target.start_with? "#{session_name}."
        end
    end

    launch_cmd = ''

    session.each do |window|
        window_name = window.keys.first
        debug "Window: #{window_name}"

        next unless launch_all_in_session ||
                    launch_windows.include?(window_name)
        
        die "#{FLAGS[:conf]}: missing key(s) for '#{session_name}.#{window_name}' " + 
            "(incorrect indentation?)" if window[window_name].nil?

        tmux_window = TmuxWindow.new window_name, window[window_name]

        launch_cmd += 'new-window' unless launch_cmd.empty?
        launch_cmd += tmux_window.build
    end

    next if launch_cmd.empty?

    launch_cmd = (if ENV['TMUX'].nil?
                      "new-session -s #{session_name}"
                  else
                      'new-window'
                  end) + launch_cmd

    launch_cmds.push launch_cmd
end

die 'No launch commands' if launch_cmds.empty?

launch_cmd = launch_cmds.join ''
launch_cmd.strip!
launch_cmd.delete_suffix! '\\; \\'

debug '-----------------------------------'
debug launch_cmd

unless FLAGS[:debug]
    `tmux #{launch_cmd}`
    # Select first window if we launched a session
    `tmux select-window -t 1` if ENV['TMUX'].nil?
end
